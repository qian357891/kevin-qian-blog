import{_ as n,o as s,c as a,e}from"./app.783f91eb.js";const t={},p=e(`<h1 id="_1-栈队列与链表" tabindex="-1"><a class="header-anchor" href="#_1-栈队列与链表" aria-hidden="true">#</a> 1.栈队列与链表</h1><h2 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack" aria-hidden="true">#</a> 栈（Stack）</h2><p>栈是<strong>后进先出</strong>的线性表，在js中，我们可以看做一个数组，<strong>进栈</strong>（添加元素）的方法为<strong>push()</strong>，而<strong>出栈</strong>（移除元素）的方法为<strong>pop()</strong></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//入栈</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2]</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3]</span>
<span class="token comment">//出栈</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2]</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列（Queue）</h2><p>队列是<strong>先进先出</strong>的线性表，在js中，我们同样也可以把队列看做一个数组，<strong>入队</strong>（添加元素）的方法为<strong>push()</strong>，而<strong>出队</strong>（移除元素）的方法为<strong>shift()</strong></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//入队</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2]</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3]</span>
<span class="token comment">//出对</span>
queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2,3]</span>
queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3]</span>
queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表-listnode" tabindex="-1"><a class="header-anchor" href="#链表-listnode" aria-hidden="true">#</a> 链表（ListNode）</h2><p>在js中，链表是一种<strong>类数组对象</strong>。关于数组，它的内存空间是连续的，而链表是分散的。所以链表需要<strong>前驱</strong>和<strong>后继</strong>来进行关联。其中，链表的数据单位叫<strong>结点</strong></p><p>注意，为了确保起点结点是能抵达的，我们有时还会设定一个head指针来专门指向链表的开始位置。</p><p>我们可以使用对象来模拟它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token literal-property property">next</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="书写构造函数" tabindex="-1"><a class="header-anchor" href="#书写构造函数" aria-hidden="true">#</a> 书写构造函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ListNode { value: 1, next: ListNode { value: 2, next: null } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表结点的添加" tabindex="-1"><a class="header-anchor" href="#链表结点的添加" aria-hidden="true">#</a> 链表结点的添加</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//如果节点不存在，则创建该节点</span>
<span class="token keyword">const</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//将node3的后继指向node2（node1的后继）</span>
node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">.</span>next
<span class="token comment">//将node1的后继指向node3</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表结点的删除" tabindex="-1"><a class="header-anchor" href="#链表结点的删除" aria-hidden="true">#</a> 链表结点的删除</h3><p>（node1-node3-node2=&gt;node1-node2）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//找到node1当前的后继（node3）</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> node1<span class="token punctuation">.</span>next
<span class="token comment">//将此时的node1的后继改为node3的后继（node2）</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> target<span class="token punctuation">.</span>next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的node3便成为一个无法到达的节点了，所以会被js的垃圾回收自动回收。</p><h3 id="链表与数组比较" tabindex="-1"><a class="header-anchor" href="#链表与数组比较" aria-hidden="true">#</a> 链表与数组比较</h3><p>链表读取数据的时间复杂度为O(n)，因为需要从起始结点遍历到查询的结点为止，数组为O(1)。但相对数组，链表对数据的添加删除更加便捷。</p>`,24),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","1.栈队列与链表.html.vue"]]);export{r as default};
