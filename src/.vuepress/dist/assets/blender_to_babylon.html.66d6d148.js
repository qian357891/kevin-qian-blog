import{_ as o,r as p,o as l,c,a as n,b as s,d as e,e as t}from"./app.783f91eb.js";const i={},r=n("h1",{id:"通过babylon-js使用blender导出的模型创建web3d应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通过babylon-js使用blender导出的模型创建web3d应用","aria-hidden":"true"},"#"),s(" 通过babylon.js使用blender导出的模型创建web3d应用")],-1),u=n("h3",{id:"什么是babylon-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是babylon-js","aria-hidden":"true"},"#"),s(" 什么是babylon.js？")],-1),d={href:"https://www.babylonjs.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/BabylonJS/Babylon.js",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/mrdoob/three.js",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"为什么是babylon-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么是babylon-js","aria-hidden":"true"},"#"),s(" 为什么是babylon.js？")],-1),h=n("p",null,[s("虽然说这两引擎在github上的star相差很多，但我认为这是由于"),n("strong",null,"时机"),s("的关系。three.js在2009年发布，而babylon.js在2013年发布。")],-1),v={href:"https://juejin.cn/column/7163571163137277965",target:"_blank",rel:"noopener noreferrer"},g={href:"https://forum.babylonjs.com/",target:"_blank",rel:"noopener noreferrer"},y=t('<p>而且，非常重要的一点。babylon.js的定位是web3d游戏引擎，而three.js的定位为一个web3d库。</p><p>综上，我选择babylon.js，下面将先进行对模型的处理。</p><h3 id="一、导出模型" tabindex="-1"><a class="header-anchor" href="#一、导出模型" aria-hidden="true">#</a> 一、导出模型</h3><blockquote><p>本篇文章导出模型的建模软件为blender。</p></blockquote><p>如果模型设置了修改器，请先全部应用（<code>a</code>全选后右键点击，选择转换到网格，勾选保留原有）。建议ctrl+j合并。</p><p>随后导出glb文件（建议勾选压缩）。</p><h3 id="二、压缩材质图片" tabindex="-1"><a class="header-anchor" href="#二、压缩材质图片" aria-hidden="true">#</a> 二、压缩材质图片</h3><p>大多数时候我们导出的文件很大是因为材质图片太大。</p>',8),_={href:"https://github.com/CesiumGS/gltf-pipeline",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g gltf-pipeline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用pnpm</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm add -g gltf-pipeline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用：<code>gltf-pipeline -i model.gltf -t </code>命令模板，将纹理材质图片单独输出</p><p>随后，你可以通过ps，将图片都保存为<code>web格式</code>，选择图片的品质，可以尝试选择<code>低</code>，大多数时候图片的品质并没有什么影响。但是空间却只有原来的最多1/10。</p><p>然后使用：<code>gltf-pipeline -i model.gltf -o model.glb</code> 命令模板，将分离的模型文件和纹理材质文件统一打包转为单体glb文件。</p><blockquote><p>本篇文章使用github存储模型文件，我们可以使用任何允许跨域的网站来导入我们的模型文件。</p></blockquote><h3 id="三、在playground中使用模型" tabindex="-1"><a class="header-anchor" href="#三、在playground中使用模型" aria-hidden="true">#</a> 三、在playground中使用模型</h3><p>babylon也有editor，这是一个很有潜力的项目。不过这个软件不太好用，而且是由社区开发的。所以我建议入门选手使用playground来编写程序和使用模型：</p>`,9),j={href:"https://www.babylonjs-playground.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/qian357891/MeshesLibrary",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>我们在playground中输入以下代码，关于各个变量和函数的作用，可以看我的注释：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Playground</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">CreateScene</span><span class="token punctuation">(</span>
    engine<span class="token operator">:</span> <span class="token constant">BABYLON</span><span class="token punctuation">.</span>Engine<span class="token punctuation">,</span>
    canvas<span class="token operator">:</span> HTMLCanvasElement
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">BABYLON</span><span class="token punctuation">.</span>Scene <span class="token punctuation">{</span>
    <span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">BABYLON</span></span><span class="token punctuation">.</span><span class="token function">Scene</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个场景,这是一个必须的常量/变量，参数为Playground类中CreateScene静态方法的engine属性</span>

    <span class="token comment">// 创建一个相机，这也是一个必须的常量/变量。这个相机是BABYLON.ArcRotateCamera类的一个实例，这个相机能够让我们使用鼠标和触摸对模型进行观看。</span>
    <span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">BABYLON</span></span><span class="token punctuation">.</span><span class="token function">ArcRotateCamera</span><span class="token punctuation">(</span>
      <span class="token string">&quot;camera&quot;</span><span class="token punctuation">,</span>
      <span class="token number">0</span><span class="token punctuation">,</span>
      Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token constant">BABYLON</span><span class="token punctuation">.</span>Vector3<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      scene
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 导入模型</span>
    <span class="token constant">BABYLON</span><span class="token punctuation">.</span>SceneLoader<span class="token punctuation">.</span><span class="token function">ImportMesh</span><span class="token punctuation">(</span>
      <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;https://cdn.jsdelivr.net/gh/qian357891/MeshesLibrary@b393a2d7702579e657ceb3c5a150ba650f13b68a/&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;temple_single_s.glb&quot;</span><span class="token punctuation">,</span>
      scene<span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span>meshes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scene<span class="token punctuation">.</span><span class="token function">createDefaultCameraOrLight</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scene<span class="token punctuation">.</span><span class="token function">createDefaultEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 该静态方法返回的是我们定义的scene场景</span>
    <span class="token keyword">return</span> scene<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于在playground中导入外部资源，也可以看看官方的文档：https://doc.babylonjs.com/toolsAndResources/thePlayground/externalPGAssets#using-jsdelivrcom，在本篇文章中，我们使用的是jsdelivr.com。</p><p>随后我们点击抬头栏目中的<code>下载</code>按钮，便可以得到一个打包好的压缩文件。</p><p><img src="https://qiankun825.oss-cn-hangzhou.aliyuncs.com/img/image-20221123191055055.png" alt="image-20221123191055055"></p>`,5),x=n("code",null,"index.html",-1),q={href:"https://code.juejin.cn/pen/7163096766378672162",target:"_blank",rel:"noopener noreferrer"};function L(S,A){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,u,n("p",null,[n("a",d,[s("Babylon.js"),e(a)]),s("，是由微软使用TypeScript开发的一款开源的web端3d游戏引擎，与three.js一样都支持webgpu。但相比于three.js来说，babylon.js更强大。现在在github上18.8K的star：")]),n("blockquote",null,[n("p",null,[s("babylon.js的github仓库链接："),n("a",b,[s("BabylonJS/Babylon.js: Babylon.js is a powerful, beautiful, simple, and open game and rendering engine packed into a friendly JavaScript framework. (github.com)"),e(a)])])]),n("p",null,[s("而它的竞品three.js在github上有87k的star："),n("a",k,[s("mrdoob/three.js: JavaScript 3D Library. (github.com)"),e(a)])]),m,h,n("p",null,[s("其次，three.js是由社区推动，并且使用javascript开发。而babylon.js有个有钱的爹——微软，使用TypeScript开发，这意味着当你进行开发时，你能够得到更好的类型提示，如果不熟悉TypeScript的朋友，可以看我的专栏："),n("a",v,[s("TS入门小记 - 跟我一起秃秃秃的专栏 - 掘金 (juejin.cn)"),e(a)]),s("。")]),n("p",null,[s("babylon.js的官方社区也在快速的发展："),n("a",g,[s("Babylon.js (babylonjs.com)"),e(a)]),s("，如果你在官方论坛中提问的话，大概率半小时内能得到答复。")]),y,n("p",null,[s("**"),n("a",_,[s("gltf-pipeline"),e(a)]),s("**提供了一个工具来对glb/gltf文件拆解和合成，我们先对这个工具进行下载，请确保你的操作系统上安装了node.js：")]),f,n("p",null,[n("a",j,[s("Babylon.js Playground (babylonjs-playground.com)"),e(a)])]),n("p",null,[s("我们选择语言为TypeScript，如果没有合适的模型的朋友，可以使用我github仓库中的两个模型来进行学习："),n("a",w,[s("qian357891/MeshesLibrary: A assets library for glb file (github.com)"),e(a)])]),B,n("p",null,[s("下载好压缩文件后，打开压缩文件中的"),x,s("。发现依赖包已经通过cdn引入了依赖包，你可以直接打开html文件进行预览： "),n("a",q,[s("代码片段"),e(a)])])])}const C=o(i,[["render",L],["__file","blender_to_babylon.html.vue"]]);export{C as default};
