import{_ as n,o as s,c as a,e as t}from"./app.783f91eb.js";const e={},p=t(`<h2 id="任务管理" tabindex="-1"><a class="header-anchor" href="#任务管理" aria-hidden="true">#</a> 任务管理</h2><p>JavaScript中的EventLoop，会不断检测有没有可加入任务队列的任务。</p><ul><li>主线程中的任务执行完后，才执行任务队列中的任务</li><li>有新任务到来时会将其放入队列，采取先进先执行的策略执行队列中的任务</li><li>比如多个 <code>setTimeout</code> 同时到时间了，就要依次执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器（宏任务）&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;微任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;同步任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打印结果为：</span>
<span class="token comment">//同步任务</span>
<span class="token comment">//微任务</span>
<span class="token comment">//定时器（宏任务）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="脚本加载" tabindex="-1"><a class="header-anchor" href="#脚本加载" aria-hidden="true">#</a> 脚本加载</h3><p>引擎在执行任务时不会进行 DOM 渲染，所以如果把<code>script</code> 定义在前面，要先执行完任务后再渲染 DOM，建议将<code>script</code> 放在 BODY 结束标签前。</p><h3 id="任务分解" tabindex="-1"><a class="header-anchor" href="#任务分解" aria-hidden="true">#</a> 任务分解</h3><p>一个比较耗时的任务可能造成游览器卡死现象</p><p>我们可以把它交给微任务，这样就不会照成阻塞了。</p>`,9),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","js_16_任务队列.html.vue"]]);export{d as default};
