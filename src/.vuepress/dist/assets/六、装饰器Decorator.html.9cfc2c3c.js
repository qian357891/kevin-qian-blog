import{_ as n,o as s,c as a,e as t}from"./app.783f91eb.js";const p={},o=t(`<h3 id="什么是装饰器" tabindex="-1"><a class="header-anchor" href="#什么是装饰器" aria-hidden="true">#</a> 什么是装饰器</h3><p>在内部，装饰器只是一个函数。在 js 执行时，将 class 传入装饰器，并执行。</p><p>首先装饰器是 js/ts 的一个实验属性，我们需要在 tsconfig.json 中找到<code>&quot;experimentalDecorators&quot;: true,</code>并打开它。</p><h3 id="类装饰器" tabindex="-1"><a class="header-anchor" href="#类装饰器" aria-hidden="true">#</a> 类装饰器</h3><p>首先装饰器的函数名我们通常情况下使用大驼峰命名法，然后函数的参数类型取决于这个装饰器作用于哪里。比如这是个类装饰器，参数的类型就为<code>Function</code>，它是作用于构造函数的。这里的参数也是指的传入的类的构造函数。</p><p>在使用类装饰器的时候将其写在类的上面（注意没有括号）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Component decorator called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniqueId <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">inserInDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Inserting the component in the DOM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">class</span> <span class="token class-name">ProfileComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//Component decorator called</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰器工厂" tabindex="-1"><a class="header-anchor" href="#装饰器工厂" aria-hidden="true">#</a> 装饰器工厂</h3><p>现在我们想要创建参数化的装饰器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 装饰器工厂/Decorator factory</span>
<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Component decorator called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>options <span class="token operator">=</span> value<span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniqueId <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">inserInDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Inserting the component in the DOM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//Component decorator called number 1</span>
<span class="token keyword">class</span> <span class="token class-name">ProfileComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来就像一个工厂，用于创建装饰器。这样的函数叫做装饰器工厂。</p><p>我们现在让参数为对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ComponentOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 装饰器工厂/Decorator factory</span>
<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Component decorator called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniqueId <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">inserInDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Inserting the component in the DOM：&quot;</span> <span class="token operator">+</span>
          constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>options<span class="token punctuation">.</span>selector
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> selector<span class="token operator">:</span> <span class="token string">&quot;#my-profile&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ProfileComponent</span> <span class="token punctuation">{</span>
  <span class="token function">inserInDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//需要声明</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> profileComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProfileComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
profileComponent<span class="token punctuation">.</span><span class="token function">inserInDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Inserting the component in the DOM：#my-profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用多个装饰器" tabindex="-1"><a class="header-anchor" href="#使用多个装饰器" aria-hidden="true">#</a> 使用多个装饰器</h3><p>我们可以同时使用多个装饰器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ComponentOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 装饰器工厂/Decorator factory</span>
<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Component decorator called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniqueId <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">inserInDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Inserting the component in the DOM：&quot;</span> <span class="token operator">+</span>
          constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>options<span class="token punctuation">.</span>selector
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Pipe</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Pipe decorator called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pipe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> selector<span class="token operator">:</span> <span class="token string">&quot;#my-profile&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Pipe</span></span>
<span class="token keyword">class</span> <span class="token class-name">ProfileComponent</span> <span class="token punctuation">{</span>
  <span class="token function">inserInDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Pipe decorator called</span>
<span class="token comment">// Component decorator called</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，我们的装饰器是按照相反的顺序应用的。</p><p>这背后的想法来自数学：在数学中如果我们有<code>f(g(x))</code>这样的表达式，然后我们会先求得 g(x)的值然后把它传给 f(x)。</p><h3 id="方法装饰器" tabindex="-1"><a class="header-anchor" href="#方法装饰器" aria-hidden="true">#</a> 方法装饰器</h3><p>方法装饰器有三个参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>参数一</td><td>普通方法是构造函数的原型对象 Prototype，静态方法是构造函数</td></tr><tr><td>参数二</td><td>方法名称</td></tr><tr><td>参数三</td><td>属性特征</td></tr></tbody></table><p>我们这里不会用到 target 和 methodName，但由于我们又在 tsconfig.josn 中进行了配置，我们可以关闭这个配置，也可以使用带下划线<code>_</code>的前缀来忽略这个报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Log</span><span class="token punctuation">(</span>
  _target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  _methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  descriptor<span class="token operator">:</span> PropertyDescriptor
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;传入数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Log</span></span>
  <span class="token function">say</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Person says &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Before</span>
<span class="token comment">// Person says 传入数据</span>
<span class="token comment">// After</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现 target 的类型使用的 any，虽然我们建议尽量不用 any，但也不是完全不用，我们在这里并不知道 target 的类型。method 的类型为 string，descriptor 属性特征的类型为 PropertyDescriptor。</p><p>我们在覆盖<code>descriptor.value</code>前将原方法保留并在新方法中调用。</p><p>我们发现我们在实例对象传的参数会被忽略。因为在我们的新方法中没有参数，而是直接调用的保存好的原函数<code>original</code>。</p><p>如果我们像不被覆盖，我们可以这样写：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Log</span><span class="token punctuation">(</span>
  _target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  _methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  descriptor<span class="token operator">:</span> PropertyDescriptor
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Log</span></span>
  <span class="token function">say</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Person says &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Before</span>
<span class="token comment">// Person says dom</span>
<span class="token comment">// After</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让这个装饰器能够在多个方法中使用，我们可以这样做：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Log</span><span class="token punctuation">(</span>
  _target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  _methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  descriptor<span class="token operator">:</span> PropertyDescriptor
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>值得注意的是：我们在写新方法时应该用函数表达式声明，而不是箭头函数声明。因为箭头函数没有自己的 this，他们的 this 指向当前实例对象</strong></p><h3 id="在访问器中使用装饰器" tabindex="-1"><a class="header-anchor" href="#在访问器中使用装饰器" aria-hidden="true">#</a> 在访问器中使用装饰器</h3><p>在 getter 和 setter 访问器中我们应该如何使用装饰器呢？</p><p>访问器与方法类似，所以我们和使用方法装饰器的时候一样，唯一不同的是，访问器不能使用<code>descriptor</code>的<code>value</code>属性，在使用 get 访问器的时候我们要使用<code>get</code>属性。而不是<code>value</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Capitalize</span><span class="token punctuation">(</span>
  _target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  _methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  descriptor<span class="token operator">:</span> PropertyDescriptor
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>get<span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token operator">?.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Capitalize</span></span>
  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Qian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//KEVIN QIAN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性装饰器" tabindex="-1"><a class="header-anchor" href="#属性装饰器" aria-hidden="true">#</a> 属性装饰器</h3><p>这里我们使用了装饰器工厂</p><p>属性装饰器的参数为：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>参数一</td><td>普通方法是构造函数的原型对象 Prototype，静态方法是构造函数</td></tr><tr><td>参数二</td><td>属性名称</td></tr></tbody></table><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">MinLength</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 注意要先声明</span>

    <span class="token keyword">const</span> descriptor<span class="token operator">:</span> PropertyDescriptor <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> should be at least </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我们通过这个方法来改变我们的原属性。</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">MinLength</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;5678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5678</span>

<span class="token comment">// user.password = &quot;22&quot;; //Error: password should be at least 4</span>

<span class="token comment">// let errUser = new User(&quot;111&quot;); //Error: password should be at least 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，传入构造函数的值如果长度小于 4，则会报错。并且在重新赋值属性的时候，装饰器会被重新调用。进行一个验证，当长度小于 4 的时候报错。</p><h3 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器" aria-hidden="true">#</a> 参数装饰器</h3><p>我们并不常使用参数装饰器，但如果你正在设计一个框架供其他人使用，你可能会用到参数装饰器。</p><p>我们通常情况将其用于存储这些参数的一些元数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WatchedParameter</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  parameterIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> watchedParameters<span class="token operator">:</span> WatchedParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Watch</span><span class="token punctuation">(</span>_target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> methodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parameterIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  watchedParameters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    methodName<span class="token punctuation">,</span>
    parameterIndex<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">move</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Watch</span></span> _speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>watchedParameters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ { methodName: &#39;move&#39;, parameterIndex: 0 } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","六、装饰器Decorator.html.vue"]]);export{r as default};
