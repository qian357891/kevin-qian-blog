import{_ as n,o as s,c as a,e}from"./app.783f91eb.js";const t={},p=e(`<h1 id="js-1-2-走进js-运算符与流程控制" tabindex="-1"><a class="header-anchor" href="#js-1-2-走进js-运算符与流程控制" aria-hidden="true">#</a> js_1_2_走进js_运算符与流程控制</h1><h2 id="前端访问流程" tabindex="-1"><a class="header-anchor" href="#前端访问流程" aria-hidden="true">#</a> 前端访问流程</h2><p>前端的代码是在<strong>浏览器运行</strong>的，而服务器只是相当于一个<strong>文件托管</strong>（在在不进行服务端渲染的情况下）。</p><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>作用域不同可以声明相同的变量名，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;qwer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;zxcv&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以正常运行</p><h2 id="变量的声明" tabindex="-1"><a class="header-anchor" href="#变量的声明" aria-hidden="true">#</a> 变量的声明</h2><p>在声明变量时，js会开辟一个内存空间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;qwer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;asdf&#39;</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;zxcv&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;dfgh&#39;</span><span class="token punctuation">;</span><span class="token comment">//报错</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">&#39;jjj&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">&#39;ggg&#39;</span><span class="token punctuation">;</span><span class="token comment">//不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里a指向的是<code>字符串qwer</code>的内存空间，而再次声明（同一作用域），则会让变量名指向<strong>新的内存空间</strong>，而对于<strong>const</strong>和<strong>let</strong>是不允许的，用<strong>var</strong>可以。</p><p>对于Number，String等原始类型，让变量1赋值给变量2，会直接开辟一块新的内存空间。当变量1中内存空间的值改变，不会引起变量2的值的改变。</p><p>对于Object引用类型，让变量1赋值给变量2，变量2会指向变量1的内存空间，当变量1的值发生改变时，变量2的值也会改变（浅拷贝）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numOne <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> numTwo <span class="token operator">=</span> numOne<span class="token punctuation">;</span>
numOne <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numOne<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numTwo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaozhou&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{name:xiaoming}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{name:xiaoming}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-freeze" tabindex="-1"><a class="header-anchor" href="#object-freeze" aria-hidden="true">#</a> Object.freeze()</h2><p>对于对象，就算const声明对象，但还是可以更改对象属性。</p><p>如果不想让对象的属性被修改，可以使用Object.freeze()方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Host_ <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;xiaoxiao&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;3000&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>Host_<span class="token punctuation">)</span><span class="token punctuation">;</span>
Host_<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token string">&#39;80&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Host_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const-let暂时性死区tdc" tabindex="-1"><a class="header-anchor" href="#const-let暂时性死区tdc" aria-hidden="true">#</a> const&amp;let暂时性死区TDC</h2><p>var，let，const都能在编译时进行<strong>变量提升</strong>，但只有var会把值初始化为undefined。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>console.log(a);//undefined
console.log(b);//报错
console.log(c);//报错
var a = 1;
let b = 2;
const c = 3;
console.log(a);//1
console.log(b);//2
console.log(c);//3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="window全局对象" tabindex="-1"><a class="header-anchor" href="#window全局对象" aria-hidden="true">#</a> window全局对象</h2><p>如window.name是窗口名称，如果用var声明变量，可能会覆盖掉window全局对象的属性。</p><h2 id="函数默认值" tabindex="-1"><a class="header-anchor" href="#函数默认值" aria-hidden="true">#</a> 函数默认值</h2><p><strong>ES6</strong>开始已经支持默认参数了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6原生选择器" tabindex="-1"><a class="header-anchor" href="#es6原生选择器" aria-hidden="true">#</a> ES6原生选择器</h2><h3 id="_1-queryselector" tabindex="-1"><a class="header-anchor" href="#_1-queryselector" aria-hidden="true">#</a> 1.querySelector</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>element 是一个 <strong>element</strong>对象（DOM 元素）。 selectors 是一个字符串，包含一个或是多个 <strong>CSS 选择器</strong> ，多个则以逗号分隔。 找到一个后立刻返回找到的第一个节点对象，如果没有则返回null</p><h3 id="_2-queryselectorall" tabindex="-1"><a class="header-anchor" href="#_2-queryselectorall" aria-hidden="true">#</a> 2.querySelectorAll</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> matches <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;div.note, div.alert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找出所有匹配的节点后，返回对应的元素节点数组</p><h2 id="js的一些运算上特性" tabindex="-1"><a class="header-anchor" href="#js的一些运算上特性" aria-hidden="true">#</a> js的一些运算上特性</h2><p>在给变量赋值时使用逻辑运算符：**或||**的时候，会将为真（非0）的值，赋值给变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> b <span class="token operator">||</span> a<span class="token punctuation">;</span>
<span class="token keyword">let</span> g <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以利用这个特性赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sex <span class="token operator">=</span>  <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;输入数据&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token string">&#39;保密&#39;</span> <span class="token punctuation">;</span><span class="token comment">//&#39;保密&#39;是真</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入内容非空时（真）,将输入的内容赋值给sex。若为空，则赋值“保密”</span>

<span class="token comment">// es6中可以用函数参数默认值来实现</span>
<span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;*|&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>num <span class="token operator">||</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出*|*|*|（复制三次）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出*|*|*|*|*|（复制五次）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原生js的弹窗" tabindex="-1"><a class="header-anchor" href="#原生js的弹窗" aria-hidden="true">#</a> 原生js的弹窗</h2><p>alert() 弹出个提示框 （确定） confirm() 弹出个确认框 （确定，取消） prompt() 弹出个输入框 让你输入东西</p><h2 id="es6中的repeat" tabindex="-1"><a class="header-anchor" href="#es6中的repeat" aria-hidden="true">#</a> es6中的repeat()</h2><p>string.repeat () 方法<strong>通过将给定字符串复制并连接指定次数来返回一个新字符串</strong>。参数为复制的次数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">&#39;*|&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">copy</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出*|*|*|（复制三次）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6对象赋值-对象的解构赋值" tabindex="-1"><a class="header-anchor" href="#es6对象赋值-对象的解构赋值" aria-hidden="true">#</a> es6对象赋值（对象的解构赋值）</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;xiaozhou&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;18&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">weight</span><span class="token operator">:</span><span class="token string">&#39;60&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">//对象的解构赋值</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">//连等是从右往左执行的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xiaozhou 18 60</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name: &#39;xiaozhou&#39;, age: &#39;18&#39;, weight: &#39;60&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","js_1_2_走进js_运算符与流程控制.html.vue"]]);export{r as default};
